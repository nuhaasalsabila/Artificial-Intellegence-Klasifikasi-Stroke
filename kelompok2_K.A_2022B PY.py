# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RMJ8gabOmzAkYZJk4s1BwYjSnLCRUCIJ
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix
import seaborn as sns
import zipfile
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.metrics import accuracy_score, precision_score
import time
from imblearn.over_sampling import SMOTE

df = pd.read_csv("healthcare-dataset-stroke-data (1).csv")
df

df.shape

df.describe()

df.corr() #matriks korelasi, nilai korelasi dari -1 sampai 1

df.isnull().sum()

df = df.fillna(df.mean()) # df fillna untuk mengisi nilai-nilai yang hilang #df mean untuk menghitung rata" untuk setiap kolo
#jadi variable ini dipake untuk menggantikan setiap nilai Nan dalam dataframe dengan nilai rata"  dari kolom yang sesuai

df['stroke'].value_counts()

def label_transform(x):
  le = LabelEncoder()
  Encoded_le = le.fit_transform(x)
  return Encoded_le

df_transformed = df.copy()
print("copy is created...")

catagoral_labels = ['gender','ever_married','work_type' ,'Residence_type','smoking_status']
for x in catagoral_labels:
  df_transformed[x] = label_transform(df_transformed[x])

df_transformed.head()

scaler = StandardScaler()
df_transformed[['age','hypertension','heart_disease','avg_glucose_level','bmi']] = scaler.fit_transform(df_transformed[['age','hypertension','heart_disease','avg_glucose_level','bmi']])

df_transformed.head()

"""# **KNN**"""

x_train, x_test, y_train, y_test =train_test_split(df_transformed[['age','hypertension','heart_disease','avg_glucose_level','bmi','gender','ever_married','work_type' ,'Residence_type','smoking_status']],df_transformed["stroke"],test_size=0.20,random_state=21)
print('Shape of Training Xs:{}'.format(x_train.shape))
print('Shape of Test Xs:{}'.format(x_test.shape))
print('Shape of Training y:{}'.format(y_train.shape))
print('Shape of Test y:{}'.format(y_test.shape))

classifier= KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2 )
classifier.fit(x_train, y_train)

y_pred= classifier.predict(x_test)
y_pred[0:100]

print("accuracy of test set using linear regression",classifier.score(x_test,y_test))

cnf_matrix = confusion_matrix(y_test, y_pred)
np.set_printoptions(precision=2)
cnf_matrix

import itertools

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):

    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)
    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.tight_layout()

plt.figure()
plot_confusion_matrix(cnf_matrix, classes= [0,1],
                      title='Confusion matrix, without normalization')
# With normalization
plt.figure()
plot_confusion_matrix(cnf_matrix, classes= [0,1], normalize=True,
                      title='Normalized confusion matrix')

plt.show()

from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))

from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score

x = df_transformed[['age','hypertension','heart_disease','avg_glucose_level','bmi','gender','ever_married','work_type' ,'Residence_type','smoking_status']]
y = df_transformed['stroke']
knn = KNeighborsClassifier(n_neighbors = 5)
scores = cross_val_score(knn, x, y, cv=5, scoring='accuracy')
print(scores)

print("accuracy of model using cross validation",scores.mean())

"""# **Oversampling KNN**"""

smote = SMOTE(random_state=42)
x_train_smote, y_train_smote = smote.fit_resample(x_train, y_train)

from sklearn.neighbors import KNeighborsClassifier

n_neighbors = 5
knn_classifier = KNeighborsClassifier(n_neighbors=n_neighbors)
knn_classifier.fit(x_train_smote, y_train_smote)

y_pred = knn_classifier.predict(x_test)
print("Classification Report:")
print(classification_report(y_test, y_pred))
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

cm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='g', cmap='Blues', cbar=False)
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.show()

print(accuracy_score(y_test, y_pred))

"""# **Logistik Regression**"""

df_transformed.head()

x_train, x_test, y_train, y_test =train_test_split(df_transformed[['age','hypertension','heart_disease','avg_glucose_level','bmi','gender','ever_married','work_type' ,'Residence_type','smoking_status']],df_transformed["stroke"],test_size=0.20,random_state=21)
print('Shape of Training Xs:{}'.format(x_train.shape))
print('Shape of Test Xs:{}'.format(x_test.shape))
print('Shape of Training y:{}'.format(y_train.shape))
print('Shape of Test y:{}'.format(y_test.shape))

logistic_regression = LogisticRegression()
logistic_regression.fit(x_train, y_train)

# Setelah melatih model
coefficients = logistic_regression.coef_

# Jumlah parameter
jumlah_parameter = coefficients.shape[1]
print(f"Jumlah parameter: {jumlah_parameter}")

y_pred = logistic_regression.predict(x_test)
print(classification_report(y_test, y_pred))
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='g', cmap='Blues', cbar=False)
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.show()

print(accuracy_score(y_test, y_pred))

smote = SMOTE(random_state=42)
x_train_smote, y_train_smote = smote.fit_resample(x_train, y_train)

logistic_regression = LogisticRegression()
logistic_regression.fit(x_train_smote, y_train_smote)

y_pred = logistic_regression.predict(x_test)
print(classification_report(y_test, y_pred))
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

cm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='g', cmap='Blues', cbar=False)
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.show()

print(accuracy_score(y_test, y_pred))

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

X, y = make_classification(n_samples=100, n_features=2, n_informative=2, n_redundant=0, n_clusters_per_class=1, random_state=42)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)

h = 0.02
x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))

Z = knn.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)

plt.figure(figsize=(8, 6))
plt.contourf(xx, yy, Z, cmap=plt.cm.coolwarm, alpha=0.3)
plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.coolwarm, edgecolors='k', marker='o')
plt.title('KNN Classification (k=5)')
plt.xlabel('Feature')
plt.ylabel('Feature')
plt.show()

import matplotlib.pyplot as plt
import numpy as np

labels = ['KNN', 'Logistic Regression']
precision_scores = [0.7896281800391389, 0.7446183953033269]

fig, ax = plt.subplots(figsize=(8, 6))

ax.bar(labels, precision_scores, color=['pink', 'lightblue'])

ax.set_ylabel('Precision')
ax.set_title('Precision Comparison: KNN vs Logistic Regression')

plt.show()

import matplotlib.pyplot as plt

# Algoritma dan waktu eksekusi
algorithms = ['KNN', 'Logistic Regression']
execution_times = [0.13, 0.106]

# Plot diagram
plt.bar(algorithms, execution_times, color=['#87CEFA', '#87CEFA'])
plt.xlabel('Algoritma')
plt.ylabel('Waktu(detik)')
plt.show()